'use client'
import { useState, useEffect } from "react";
import Sidebar from "../components/Sidebar";
import { Bell, Moon } from "lucide-react";
import "@/styles/settingstyle.css";
import "@/styles/components.css";
import { useTheme } from "../contexts/ThemeContext";
import { toast } from "react-hot-toast";
import { useSession } from "next-auth/react";

export default function Settings() {
    const { darkMode, toggleDarkMode } = useTheme();
    const { data: session } = useSession();
    const [dustThreshold, setDustThreshold] = useState(25);
    const [isNotificationEnabled, setIsNotificationEnabled] = useState(false);
    const [isLoading, setIsLoading] = useState(true);

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤
    useEffect(() => {
        const fetchUserSettings = async () => {
            try {
                setIsLoading(true);
                
                const currentUserId = session?.user?.id ? String(session.user.id) : "1";
                
                console.log("Fetching settings for user:", currentUserId);
                
                const response = await fetch(`/api/setting/GET?userId=${currentUserId}`, {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json',
                    }
                });
                
                const responseData = await response.json();
                console.log("Settings API response:", responseData);
                
                if (response.ok && responseData.success && responseData.data) {
                    // ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ - ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ
                    setDustThreshold(responseData.data.dustThreshold || 25);
                    setIsNotificationEnabled(responseData.data.isEnabled || false);
                    
                    console.log("‚úÖ Loaded saved settings:", {
                        dustThreshold: responseData.data.dustThreshold || 25,
                        isNotificationEnabled: responseData.data.isEnabled || false
                    });
                    
                    toast.success(`‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à - ‡∏Ñ‡πà‡∏≤‡∏ù‡∏∏‡πà‡∏ô: ${responseData.data.dustThreshold || 25} ¬µg/m¬≥`, {
                        duration: 2000
                    });
                    
                } else if (response.status === 404 || responseData.error?.includes('404')) {
                    // ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ - ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
                    console.log("‚ÑπÔ∏è No settings found, using default values");
                    setDustThreshold(25);
                    setIsNotificationEnabled(false);
                    toast("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ ‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô", {
                        duration: 2000,
                        icon: "‚ÑπÔ∏è"
                    });
                } else {
                    // ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏≠‡∏∑‡πà‡∏ô‡πÜ
                    console.error("‚ùå Error fetching settings:", responseData.error);
                    setDustThreshold(25);
                    setIsNotificationEnabled(false);
                    toast.error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÑ‡∏î‡πâ ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô", {
                        duration: 3000
                    });
                }
                
            } catch (error) {
                console.error("‚ùå Network error fetching settings:", error);
                
                setDustThreshold(25);
                setIsNotificationEnabled(false);
                toast.error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô", {
                    duration: 3000
                });
            } finally {
                setIsLoading(false);
            }
        };

        fetchUserSettings();
    }, [session?.user?.id]); // ‡πÉ‡∏ä‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ session?.user?.id ‡πÄ‡∏õ‡πá‡∏ô dependency

    const handleThresholdChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        setDustThreshold(Number(e.target.value));
    };

    const handleNotificationToggle = (e: React.ChangeEvent<HTMLInputElement>) => {
        setIsNotificationEnabled(e.target.checked);
    };

    const saveThreshold = async () => {
        try {
            const currentUserId = session?.user?.id ? String(session.user.id) : "1";
            
            console.log("üíæ Saving settings:", {
                userId: currentUserId,
                dustThreshold,
                isNotificationEnabled
            });
            
            toast.loading("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å...", { id: "save-settings" });
            
            const response = await fetch('/api/setting', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ 
                    userId: currentUserId, 
                    dustThreshold,  
                    isNotificationEnabled 
                }),
            });
            
            const responseData = await response.json();
            
            if (response.ok && responseData.success) {
                console.log("‚úÖ Settings saved successfully");
                toast.success(`‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à - ‡∏Ñ‡πà‡∏≤‡∏ù‡∏∏‡πà‡∏ô: ${dustThreshold} ¬µg/m¬≥`, { 
                    id: "save-settings",
                    duration: 3000
                });
            } else {
                console.error("‚ùå Failed to save settings:", responseData);
                toast.error(`‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${responseData.error || '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÑ‡∏î‡πâ'}`, {
                    id: "save-settings"
                });
            }
        } catch (error) {
            console.error("‚ùå Error saving settings:", error);
            toast.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤', {
                id: "save-settings"
            });
        }
    };

    // ‡πÅ‡∏™‡∏î‡∏á loading indicator ‡∏´‡∏≤‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    if (isLoading) {
        return (
            <div className={`dashboard-container ${darkMode ? 'dark' : ''}`}>
                <Sidebar />
                <div className="main-content">
                    <div className="settings-container fade-in">
                        <h1 className="settings-title">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤...</h1>
                        <div className="loading-spinner">
                            <div className="spinner"></div>
                        </div>
                    </div>
                </div>
            </div>
        );
    }

    return (
        <div className={`dashboard-container ${darkMode ? 'dark' : ''}`}>
            <Sidebar />
            <div className="main-content">
                <div className="settings-container fade-in">
                    <h1 className="settings-title">‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤</h1>
                    
                    <div className="settings-grid">
                        <div className="settings-card">
                            <div className="settings-header">
                                <Bell className="settings-icon" size={24} />
                                <h2>‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô</h2>
                            </div>
                            <div className="settings-content">
                                <div className="settings-item">
                                    <label>‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Ñ‡πà‡∏≤‡∏ù‡∏∏‡πà‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î</label>
                                    <input 
                                        type="checkbox" 
                                        className="toggle-switch"
                                        checked={isNotificationEnabled}
                                        onChange={handleNotificationToggle}
                                    />
                                </div>
                                <div className="settings-item">
                                    <label>‡∏Ñ‡πà‡∏≤‡∏ù‡∏∏‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô (¬µg/m¬≥)</label>
                                    <input 
                                        type="range" 
                                        min="10" 
                                        max="100" 
                                        value={dustThreshold} 
                                        onChange={handleThresholdChange} 
                                        className="threshold-slider" 
                                    />
                                    <span className="threshold-value">{dustThreshold}</span>
                                </div>
                                <div className="settings-item">
                                    <button className="save-threshold-btn" onClick={saveThreshold}>
                                        ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
                                    </button>
                                </div>
                            </div>
                        </div>

                        <div className="settings-card">
                            <div className="settings-header">
                                <Moon className="settings-icon" size={24} />
                                <h2>‡∏ò‡∏µ‡∏°</h2>
                            </div>
                            <div className="settings-content">
                                <div className="settings-item">
                                    <label>‡πÇ‡∏´‡∏°‡∏î‡∏Å‡∏•‡∏≤‡∏á‡∏Ñ‡∏∑‡∏ô</label>
                                    <input 
                                        type="checkbox" 
                                        className="toggle-switch"
                                        checked={darkMode}
                                        onChange={toggleDarkMode}
                                    />
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    );
}